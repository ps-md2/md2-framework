package de.wwu.md2.framework.generator.ios

import de.wwu.md2.framework.generator.util.DataContainer
import de.wwu.md2.framework.mD2.AlternativesPane
import de.wwu.md2.framework.mD2.Button
import de.wwu.md2.framework.mD2.CheckBox
import de.wwu.md2.framework.mD2.ContainerElementDef
import de.wwu.md2.framework.mD2.ContainerElementRef
import de.wwu.md2.framework.mD2.Enum
import de.wwu.md2.framework.mD2.FlowLayoutPane
import de.wwu.md2.framework.mD2.GridLayoutPane
import de.wwu.md2.framework.mD2.Label
import de.wwu.md2.framework.mD2.Model
import de.wwu.md2.framework.mD2.OptionInput
import de.wwu.md2.framework.mD2.TabTitleParam
import de.wwu.md2.framework.mD2.TabbedAlternativesPane
import de.wwu.md2.framework.mD2.TextInput
import de.wwu.md2.framework.mD2.Tooltip
import de.wwu.md2.framework.mD2.View
import java.util.Date

import static de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*

class LocalizableStrings {
	
	def static createLocalizableStrings(DataContainer dataContainer) '''
		/*
		  Localizable.strings
		
		  Generated by MD2 framework on «new Date()».
		  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		*/
		
		/*########## Label Strings ##########*/
		
		«FOR viewElementLabelString : createViewElementStrings(dataContainer.views).get(0)»
			«viewElementLabelString»
		«ENDFOR»
		
		
		/*########## Info Text Strings ##########*/
		
		«FOR viewElementInfoTextString : createViewElementStrings(dataContainer.views).get(1)»
			«viewElementInfoTextString»
		«ENDFOR»
		
		
		/*########## Other Strings ##########*/
		
		/* Buttons (static) */
		"BT_done" = "Fertig";
		"BT_exit" = "Beenden";
		"BT_forwards" = "Weiter";
		"BT_backwards" = "Zurück";
		"BT_add" = "Hinzufügen";
		
		/* Navigation Bar Items (static) */
		"NB_help" = "Hilfe";
		"NB_picker" = "Auswahl";
		
		/* Tab Label Items (generated) */
		«FOR tabLabelString : createTabLabelStrings(dataContainer.views)»
			«tabLabelString»
		«ENDFOR»
		
		/* Buttons (generated) */
		«FOR viewElementButtonString : createViewElementStrings(dataContainer.views).get(2)»
			«viewElementButtonString»
		«ENDFOR»
		
		
		/*########## Error / Warning / Information Strings ##########*/

		/* Workflow (static) */
		"err_title_workflow_forwards" = "Workflow-Validation fehlgeschlagen.";
		"err_workflow_forwards" = "Bitte geben Sie alle Felder an, um fortzufahren.";
		"err_button_workflow_forwards" = "OK";
		
		"err_title_workflow_backwards" = "Workflow-Validation fehlgeschlagen.";
		"err_workflow_backwards" = "Bitte geben Sie alle Felder an, um fortzufahren.";
		"err_button_workflow_backwards" = "OK";
		
		/* Validators (static) */
		"val_alphabetic" = "Bitte geben Sie nur alphabetische Zeichen (a-z, A-Z) ein.";
		"val_float" = "Bitte geben nur Zahlen (ganzzahlig oder gleitkomma) ein.";
		"val_integer" = "Bitte geben Sie nur ganzzahlige Werte (0-9) ein.";
		"val_numberRange" = "Bitte geben Sie einen Wert zwischen %i und %i ein.";
		"val_stringRange" = "Bitte geben Sie zwischen %i und %i Zeichen ein.";
		"val_notEmpty" = "Wert erwartet.";
		"val_regEx" = "Der eingegebene Ausdruck entspricht nicht dem erwarteten Pattern.";
		"val_failed" = "Validation fehlgeschlagen.";
		"val_button_failed" = "OK";
		
		/* Edit Picker (static) */
		"inf_new_option" = "Bitte geben Sie die neue Option ein.";
		"inf_new_option_message" = "Neue Option";
		"inf_new_option_button" = "OK";

		/* Remote */
		"rem_code_404_title" = "HTTP-Status-Code 404";
		"rem_code_404_message" = "Das angegebene Objekt konnte nicht gefunden werden.";
		"rem_code_404_button" = "Ok";
		
		
		/*########## Enum Value Strings ##########*/
		
		«FOR enumValueString : createEnumValueStrings(dataContainer.models)»
			«enumValueString»
		«ENDFOR»
		'''
	
	/**
	 * Get a set that consists of id-string pairs of all enums
	 */
	def private static createEnumValueStrings(Iterable<Model> models)
	{
		val result = newArrayList
		models.map(model|model.modelElements.filter(typeof(Enum))).flatten.forEach [md2Enum |
			var i = 0
			for(string : md2Enum.enumBody.elements)
			{
				result.add('''"«md2Enum.name.toFirstLower.substring(md2Enum.name.lastIndexOf("_") + 1).toFirstLower»_«i»" = "«string»";''')
				i = i + 1
			}
		]
		result
	}
	
	/**
	 * Get a set that consists of all labelId-string pairs
	 */
	def private static createViewElementStrings(Iterable<View> views)
	{
		val labels = newArrayList
		val infos = newArrayList
		val other = newArrayList
		views.map(view | view.eAllContents.toIterable).flatten.forEach [element |
			switch element
			{
				TextInput:
				{
					if(element.labelText != null)
						labels.add('''"«getName(element)»_Label" = "«element.labelText»";''')
					if(element.tooltipText != null)
						infos.add('''"«getName(element)»_Info" = "«element.tooltipText»";''')
				}
				OptionInput:
				{
					if(element.labelText != null)
						labels.add('''"«getName(element)»_Label" = "«element.labelText»";''')
					if(element.tooltipText != null)
						infos.add('''"«getName(element)»_Info" = "«element.tooltipText»";''')
				}
				Button: other.add('''"BT_«getName(element)»" = "«element.text»";''')
				CheckBox:
				{
					if(element.labelText != null)
						labels.add('''"«getName(element)»_Label" = "«element.labelText»";''')
					if(element.tooltipText != null)
						infos.add('''"«getName(element)»_Info" = "«element.tooltipText»";''')
				}
				Tooltip: infos.add('''"«getName(element)»_Info" = "«element.text»";''')
				Label: labels.add('''"«getName(element)»_Label" = "«element.text»";''')
			}
		]
		newArrayList(labels, infos, other)
	}
	
	def private static createTabLabelStrings(Iterable<View> views)
	{
		val tabLabels = newArrayList
		views.map(view | view.viewElements).flatten.filter(typeof(TabbedAlternativesPane)).forEach [ tabbedPane |
			tabbedPane.elements.forEach [tabInnerViewType |
				var tabInnerView = switch tabInnerViewType
				{
					ContainerElementRef: tabInnerViewType.value
					ContainerElementDef: tabInnerViewType.value
				}
				
				// check whether name is set in param
				var String tabTitle = switch tabInnerView
				{
					GridLayoutPane: tabInnerView.params.filter(typeof(TabTitleParam)).last?.tabTitle
					FlowLayoutPane: tabInnerView.params.filter(typeof(TabTitleParam)).last?.tabTitle
					AlternativesPane: tabInnerView.params.filter(typeof(TabTitleParam)).last?.tabTitle
				}
				
				if(tabTitle != null)
					tabLabels.add('''"TI_«getName(tabInnerView)»" = "«tabTitle»";''')
				else
					tabLabels.add('''"TI_«getName(tabInnerView)»" = "«getName(tabInnerView)»";''')
			]
		]
		tabLabels.filterNull
	}
}
