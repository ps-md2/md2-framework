package de.wwu.md2.framework.generator.ios

import de.wwu.md2.framework.generator.util.DataContainer
import java.util.Date

import static de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*

class ActionEventClass
{
	def static createSpecificAppDataH(DataContainer dataContainer) '''
		//
		//  SpecificAppData.h
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		«FOR container : dataContainer.viewContainers»
			#import "«getName(container).toFirstUpper»Controller.h"
		«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»
			#import "«contentProvider.name.toFirstUpper»ContentProvider.h"
		«ENDFOR»
		@class Workflow;
		
		@interface SpecificAppData : NSObject
		{
			«FOR container : dataContainer.viewContainers»
				«getName(container).toFirstUpper»Controller *«getName(container).toFirstLower»Controller;
			«ENDFOR»
			
			«FOR contentProvider : dataContainer.contentProviders»
				«contentProvider.name.toFirstUpper»ContentProvider *«contentProvider.name.toFirstLower»ContentProvider;
			«ENDFOR»
			
			«FOR workflow : dataContainer.workflows»
				Workflow *«workflow.name.toFirstLower»Workflow;
			«ENDFOR»
		}
		
		«FOR container : dataContainer.viewContainers»
			@property (retain, nonatomic) «getName(container).toFirstUpper»Controller *«getName(container).toFirstLower»Controller;
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			@property (retain, nonatomic) «contentProvider.name.toFirstUpper»ContentProvider *«contentProvider.name.toFirstLower»ContentProvider;
		«ENDFOR»
		
		«FOR workflow : dataContainer.workflows»
			@property (retain, nonatomic) Workflow *«workflow.name.toFirstLower»Workflow;
		«ENDFOR»
		
		«FOR container : dataContainer.viewContainers»+(«getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller;«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»+(«contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider;«ENDFOR»
		«FOR workflow : dataContainer.workflows»+(Workflow *) «workflow.name.toFirstLower»Workflow;«ENDFOR»
		
		«FOR container : dataContainer.viewContainers»+(void) set«getName(container).toFirstUpper»Controller: («getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller;«ENDFOR»
		«FOR contentProvider : dataContainer.contentProviders»+(void) set«contentProvider.name.toFirstUpper»ContentProvider: («contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider;«ENDFOR»
		«FOR workflow : dataContainer.workflows»+(void) set«workflow.name.toFirstUpper»Workflow: (Workflow *) «workflow.name.toFirstLower»Workflow;«ENDFOR»
		
		@end'''
	
	def static createSpecificAppDataM(DataContainer dataContainer) '''
		//
		//  SpecificAppData.m
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#import "SpecificAppData.h"
		@implementation SpecificAppData
		
		static SpecificAppData *instance;
		
		@synthesize «dataContainer.viewContainers.map(container | getName(container).toFirstLower + "Controller").join(", ")»;
		@synthesize «dataContainer.contentProviders.map(provider | provider.name.toFirstLower + "ContentProvider").join(", ")»;
		«IF !dataContainer.workflows.empty»@synthesize «dataContainer.workflows.map(workflow | workflow.name.toFirstLower + "Workflow").join(", ")»;«ENDIF»
		
		#pragma mark Initialization Methods

		+(SpecificAppData *) instance
		{
			@synchronized([SpecificAppData class])
			{
				if (!instance)
					instance = [[self alloc] init];
				return instance;
			}
			return nil;
		}
		
		+(id) alloc
		{
			@synchronized([SpecificAppData class])
			{
				NSAssert(instance == nil, @"Attempted to allocate a second instance of a singleton.");
				instance = [super alloc];
				return instance;
			}
			return nil;
		}
		
		+(id) init
		{
		    return [self init];
		}

		#pragma mark Static Accessor Methods
		
		«FOR container : dataContainer.viewContainers»
			+(«getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller
			{
			    return [SpecificAppData instance].«getName(container).toFirstLower»Controller;
			}
			
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			+(«contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider
			{
			    return [SpecificAppData instance].«contentProvider.name.toFirstLower»ContentProvider;
			}
			
		«ENDFOR»
		
		«FOR workflow : dataContainer.workflows»
			+(Workflow *) «workflow.name.toFirstLower»Workflow
			{
			    return [SpecificAppData instance].«workflow.name.toFirstLower»Workflow;
			}
			
		«ENDFOR»
		
		#pragma mark Static Manipulation Methods
		
		«FOR container : dataContainer.viewContainers»
			+(void) set«getName(container).toFirstUpper»Controller: («getName(container).toFirstUpper»Controller *) «getName(container).toFirstLower»Controller
			{
			    [SpecificAppData instance].«getName(container).toFirstLower»Controller = «getName(container).toFirstLower»Controller;
			}
			
		«ENDFOR»
		
		«FOR contentProvider : dataContainer.contentProviders»
			+(void) set«contentProvider.name.toFirstUpper»ContentProvider: («contentProvider.name.toFirstUpper»ContentProvider *) «contentProvider.name.toFirstLower»ContentProvider
			{
			    [SpecificAppData instance].«contentProvider.name.toFirstLower»ContentProvider = «contentProvider.name.toFirstLower»ContentProvider;
			}
			
		«ENDFOR»
		
		«FOR workflow : dataContainer.workflows»
			+(void) set«workflow.name.toFirstUpper»Workflow: (Workflow *) «workflow.name.toFirstLower»Workflow
			{
			    [SpecificAppData instance].«workflow.name.toFirstLower»Workflow = «workflow.name.toFirstLower»Workflow;
			}
			
		«ENDFOR»

		@end'''
}