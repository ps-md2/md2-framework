package de.wwu.md2.framework.generator.ios

import de.wwu.md2.framework.generator.util.DataContainer
import de.wwu.md2.framework.generator.util.preprocessor.PreprocessModel
import de.wwu.md2.framework.mD2.AlternativesPane
import de.wwu.md2.framework.mD2.ContainerElement
import de.wwu.md2.framework.mD2.CustomAction
import de.wwu.md2.framework.mD2.FlowLayoutPane
import de.wwu.md2.framework.mD2.GridLayoutPane
import de.wwu.md2.framework.mD2.TabIconParam
import java.util.Date

import static de.wwu.md2.framework.generator.util.MD2GeneratorUtil.*

class InitializeApplicationAction
{
	def static createInitializeApplicationActionM(DataContainer dataContainer) '''
		//
		//  InitializeApplicationAction.m
		//
		//  Generated by MD2 framework on «new Date()».
		//  Copyright (c) 2012 Uni-Muenster. All rights reserved.
		//
		
		#import "SpecificAppData.h"
		#import "«IOSGenerator::md2LibraryImport»/InitializeApplicationAction.h"
		#import "«IOSGenerator::md2LibraryImport»/HelpController.h"
		#import "«IOSGenerator::md2LibraryImport»/PickerController.h"
		#import "«IOSGenerator::md2LibraryImport»/DataMapper.h"
		#import "«IOSGenerator::md2LibraryImport»/Workflow.h"
		#import "«IOSGenerator::md2LibraryImport»/WorkflowManagement.h"
		#import "«dataContainer.main.onInitializedEvent.name.toFirstUpper»Action.h"
		«FOR container : dataContainer.viewContainers»
			#import "«getName(container).toFirstUpper»Controller.h"
		«ENDFOR»
		«IF dataContainer.controllers.map(c | c.controllerElements).flatten.filter(typeof(CustomAction)).exists(a | a.name.equals(PreprocessModel::autoGenerationActionName))»
			#import "AutoGenerationActionAction.h"
		«ENDIF»
		«FOR workflowStep: dataContainer.workflows.map(w | w.workflowSteps).flatten»
			«IF !workflowStep.backwardEvents.empty»#import "«workflowStep.name.toFirstUpper + "BackwardWorkflowStepAction.h"»"«ENDIF»
			«IF !workflowStep.forwardEvents.empty»#import "«workflowStep.name.toFirstUpper + "ForwardWorkflowStepAction.h"»"«ENDIF»
			«IF workflowStep.backwardCondition != null»#import "«workflowStep.name.toFirstUpper + "BackwardCondition.h"»"«ENDIF»
			«IF workflowStep.forwardCondition != null»#import "«workflowStep.name.toFirstUpper + "ForwardCondition.h"»"«ENDIF»
		«ENDFOR»
		
		@implementation InitializeApplicationAction
		
		+(void) performAction: (Event *) event
		{
			InitializeApplicationEvent *_event = (InitializeApplicationEvent *) event;
			
			
			// initialize controllers and appropriate views
			«FOR container : dataContainer.viewContainers»
				«getName(container).toFirstUpper»Controller *«getName(container).toFirstLower»Controller = [[«getName(container).toFirstUpper»Controller alloc] init];
				«IF dataContainer.tabbedAlternativesPane != null»
					UIImage *«getName(container).toFirstLower»ControllerImage = [UIImage imageNamed:@"«getTabIcon(container)»"];
					UITabBarItem* «getName(container).toFirstLower»ControllerItem = [[UITabBarItem alloc] initWithTitle: LocalizedKeyString(@"TI_«getName(container)»") image: «getName(container).toFirstLower»ControllerImage tag: 0];
					«getName(container).toFirstLower»Controller.tabBarItem = «getName(container).toFirstLower»ControllerItem;
					
				«ENDIF»
			«ENDFOR»
			NSArray* controllers = [NSArray arrayWithObjects: «FOR container : dataContainer.tabbedViewContent»«getName(container).toFirstLower»Controller, «ENDFOR»nil];
			
			
			// initialize content providers
			«FOR contentProvider : dataContainer.contentProviders»
				«contentProvider.name.toFirstUpper»ContentProvider *«contentProvider.name.toFirstLower»ContentProvider = [[«contentProvider.name.toFirstUpper»ContentProvider alloc] init];
			«ENDFOR»
			GPSContentProvider *gpsContentProvider = [[GPSContentProvider alloc] init];
			
			
			// initialize workflows
			«FOR workflow : dataContainer.workflows»
				«FOR workflowStep : workflow.workflowSteps»
					WorkflowStep *«workflowStep.name.toFirstLower»WorkflowStep = [WorkflowStep stepWithName: @"«workflowStep.name.toFirstLower»" controller: «getName(resolveViewGUIElement(workflowStep.view)).toFirstLower»Controller forwardCondition: «IF workflowStep.forwardCondition != null»[[«workflowStep.name.toFirstUpper»ForwardCondition alloc] init]«ELSE»nil«ENDIF» backwardCondition: «IF workflowStep.backwardCondition != null»[[«workflowStep.name.toFirstUpper»BackwardCondition alloc] init]«ELSE»nil«ENDIF»];
				«ENDFOR»
				Workflow *«workflow.name.toFirstLower»Workflow = [Workflow workflowWithName: @"«workflow.name.toFirstLower»" workflowSteps: [NSArray arrayWithObjects: «FOR workflowStep : workflow.workflowSteps»«workflowStep.name.toFirstLower»WorkflowStep, «ENDFOR»nil]];
			«ENDFOR»
			WorkflowManagement *workflowManagement = [WorkflowManagement workflowManagementWithWorkflows: [NSArray arrayWithObjects: «FOR workflow : dataContainer.workflows»«workflow.name.toFirstLower»Workflow, «ENDFOR»nil]];
			
			
			// set up app data
			[AppData setPopoverController: [UIPopoverController alloc]];
			[AppData setTabBarController: [[UITabBarController alloc] init]];
			[AppData setControllers: controllers];
			[AppData setCurrentController: «getName(resolveContainerElement(dataContainer.main.startView)).toFirstLower»Controller];
			[AppData setPickerController: [[PickerController alloc] init]];
			[AppData setHelpController: [[HelpController alloc] init]];
			«FOR container : dataContainer.viewContainers»
				[SpecificAppData set«getName(container).toFirstUpper»Controller: «getName(container).toFirstLower»Controller];
			«ENDFOR»
			«FOR contentProvider : dataContainer.contentProviders»
				[SpecificAppData set«contentProvider.name.toFirstUpper»ContentProvider: «contentProvider.name.toFirstLower»ContentProvider];
			«ENDFOR»
			[AppData setWorkflowManagement: workflowManagement];
			«FOR workflow : dataContainer.workflows»
				[SpecificAppData set«workflow.name.toFirstUpper»Workflow: «workflow.name.toFirstLower»Workflow];
			«ENDFOR»
			[AppData setEventActionMapping: [[NSMutableDictionary alloc] init]];
			[AppData setGPSContentProvider: gpsContentProvider];
			[AppData setModelVersion: @"«dataContainer.main.modelVersion»"];
			
			// configure popover and tab bar controller
		    [AppData popoverController].delegate = _event.appDelegate;
		    [AppData popoverController].popoverContentSize = PopoverContentSize;
			«IF dataContainer.tabbedAlternativesPane != null»
				[AppData tabBarController].viewControllers = controllers;
				[AppData tabBarController].delegate = _event.appDelegate;
				«IF dataContainer.tabbedViewContent.contains(resolveContainerElement(dataContainer.main.startView))»
					[AppData tabBarController].selectedViewController = «getName(resolveContainerElement(dataContainer.main.startView)).toFirstLower»Controller;
				«ELSE»
					[AppData tabBarController].selectedViewController = [controllers objectAtIndex: 0];
				«ENDIF»
			«ENDIF»
			
			
			// start actions
			[«dataContainer.main.onInitializedEvent.name.toFirstUpper»Action performCustomAction];
			«IF dataContainer.controllers.map(c | c.controllerElements).flatten.filter(typeof(CustomAction)).exists(a | a.name.equals(PreprocessModel::autoGenerationActionName))»[AutoGenerationActionAction performCustomAction];«ENDIF»
			«FOR workflowStep: dataContainer.workflows.map(w | w.workflowSteps).flatten»
				«IF !workflowStep.backwardEvents.empty»
					[«workflowStep.name.toFirstUpper + "BackwardWorkflowStepAction"» performCustomAction];
				«ENDIF»
				«IF !workflowStep.forwardEvents.empty»
					[«workflowStep.name.toFirstUpper + "ForwardWorkflowStepAction"» performCustomAction];
				«ENDIF»
			«ENDFOR»
			[«getName(resolveContainerElement(dataContainer.main.startView)).toFirstLower»Controller loadData];
			
			
			// set up window
			[AppData setWindow: [[UIWindow alloc] initWithFrame: [[UIScreen mainScreen] bounds]]];
			[AppData window].backgroundColor = [UIColor whiteColor];
			«IF dataContainer.tabbedAlternativesPane != null»
				[AppData window].rootViewController = [AppData tabBarController];
				«IF !dataContainer.tabbedViewContent.contains(resolveContainerElement(dataContainer.main.startView))»
					[AppData window].rootViewController = «getName(resolveContainerElement(dataContainer.main.startView)).toFirstLower»Controller;
				«ENDIF»
			«ELSE»
				[AppData window].rootViewController = «getName(resolveContainerElement(dataContainer.main.startView)).toFirstLower»Controller;
			«ENDIF»
			[[AppData window] makeKeyAndVisible];
		}
		
		@end'''
	
	def private static getTabIcon (ContainerElement container)
	{
		var String tabIcon = switch container
		{
			GridLayoutPane: container.params.filter(typeof(TabIconParam)).last?.tabIcon
			FlowLayoutPane: container.params.filter(typeof(TabIconParam)).last?.tabIcon
			AlternativesPane: container.params.filter(typeof(TabIconParam)).last?.tabIcon
		}
		if (tabIcon != null)
			tabIcon
		else
			""
	}
}